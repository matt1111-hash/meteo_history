import os
import time
import pandas as pd
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import sys
from datetime import datetime

class CSVHandler(FileSystemEventHandler):
    def __init__(self):
        self.central_db_path = "/home/tibor/csv_projekt/CSV-normalis/energia_adatok.csv"
        # Kezdeti feldolgozás
        self.process_existing_files()
        
    def process_existing_files(self):
        watch_path = "/home/tibor/csv_projekt/CSV-eredeti"
        print("Meglévő fájlok feldolgozása kezdődik...")
        files = sorted(os.listdir(watch_path))
        print(f"Talált fájlok száma: {len(files)}")
        
        combined_df = pd.DataFrame()
        
        for filename in files:
            if filename.endswith('.csv'):
                file_path = os.path.join(watch_path, filename)
                print(f"Feldolgozás: {filename}")
                try:
                    # CSV beolvasása
                    df = pd.read_csv(file_path, 
                                   encoding='cp1252',
                                   sep=';',
                                   decimal=',')
                    
                    print(f"Oszlopnevek: {df.columns.tolist()}")
                    
                    # Oszlopnevek átnevezése
                    df = df.rename(columns={
                        'Kezdõ dátum': 'Kezdõ_dátum',
                        'Hatásos érték [kWh]': 'Hatásos_érték_[kWh]'
                    })
                    print("Átnevezés után:", df.columns.tolist())
                    
                    # Hozzáadjuk a teljes dataframe-hez
                    combined_df = pd.concat([combined_df, df], ignore_index=True)
                    print(f"Sikeresen feldolgozva: {filename}")
                except Exception as e:
                    print(f"Hiba a fájl feldolgozása közben: {filename}")
                    print(f"Hiba részletei: {str(e)}")
        
        if not combined_df.empty:
            try:
                # Dátum konvertálása
                combined_df['Kezdõ_dátum'] = pd.to_datetime(combined_df['Kezdõ_dátum'])
                
                # Duplikátumok eltávolítása és rendezés
                combined_df = combined_df.drop_duplicates(subset=['Kezdõ_dátum'], keep='last')
                combined_df = combined_df.sort_values('Kezdõ_dátum')
                
                # Központi adatbázis mentése
                os.makedirs(os.path.dirname(self.central_db_path), exist_ok=True)
                combined_df.to_csv(self.central_db_path, 
                                 encoding='utf-8',
                                 sep=',',
                                 decimal='.',
                                 index=False)
                
                print(f"Központi adatbázis létrehozva: {len(combined_df)} rekord")
            except Exception as e:
                print(f"Hiba a központi adatbázis létrehozásakor: {str(e)}")
        
    def on_created(self, event):
        if not event.is_directory and event.src_path.endswith('.csv'):
            self.process_csv(event.src_path)
    
    def process_csv(self, csv_path):
        try:
            time.sleep(1)  # Várunk egy kicsit, hogy a fájl biztosan létrejöjjön
            print(f"Új fájl feldolgozása: {csv_path}")
            
            # Új CSV beolvasása
            new_df = pd.read_csv(csv_path, 
                               encoding='cp1252',
                               sep=';',
                               decimal=',')
            
            # Oszlopnevek átnevezése
            new_df = new_df.rename(columns={
                'Kezdő dátum': 'Kezdõ_dátum',
                'Hatásos érték [kWh]': 'Hatásos_érték_[kWh]'
            })
            
            # Ha létezik központi adatbázis, beolvassuk
            if os.path.exists(self.central_db_path):
                existing_df = pd.read_csv(self.central_db_path)
                existing_df['Kezdõ_dátum'] = pd.to_datetime(existing_df['Kezdõ_dátum'])
                new_df['Kezdõ_dátum'] = pd.to_datetime(new_df['Kezdõ_dátum'])
                
                # Összefűzzük az új és régi adatokat
                combined_df = pd.concat([existing_df, new_df], ignore_index=True)
                
                # Duplikátumok eltávolítása és rendezés
                combined_df = combined_df.drop_duplicates(subset=['Kezdõ_dátum'], keep='last')
                combined_df = combined_df.sort_values('Kezdõ_dátum')
                
                # Központi adatbázis mentése
                combined_df.to_csv(self.central_db_path, 
                                 encoding='utf-8',
                                 sep=',',
                                 decimal='.',
                                 index=False)
                
                print(f"Fájl sikeresen hozzáadva a központi adatbázishoz")
            
        except Exception as e:
            print(f"Hiba történt a {csv_path} feldolgozása során: {str(e)}")

def start_monitoring():
    try:
        watch_path = "/home/tibor/csv_projekt/CSV-eredeti"
        print(f"Figyelendő mappa: {watch_path}")
        
        event_handler = CSVHandler()
        observer = Observer()
        observer.schedule(event_handler, watch_path, recursive=False)
        observer.start()
        
        print(f"Figyelés alatt: {watch_path}")
        print("A program fut. Nyomj Ctrl+C-t a leállításhoz...")
        
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nFigyelés leállítva")
    except Exception as e:
        print(f"Hiba történt: {str(e)}")
        sys.exit(1)
    
    observer.join()

if __name__ == "__main__":
    start_monitoring()
